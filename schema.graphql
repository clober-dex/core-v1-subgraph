type Market @entity {
    # market address
    id: ID!
    orderToken: Bytes!
    quoteToken: Token!
    baseToken: Token!
    quoteUnit: BigInt!
    makerFee: BigInt!
    takerFee: BigInt!
    a: BigInt!
    r: BigInt!
    d: BigInt!

    depths: [Depth!]! @derivedFrom(field: "market")
    openOrders: [OpenOrder!]! @derivedFrom(field: "market")

    latestPriceIndex: BigInt!
    latestPrice: BigInt!

    maxPriceIndex: BigInt!
    priceUpperBound: BigInt!
}

type Depth @entity {
    # market address + "-" + priceIndex + "-" + isBid in swaps Transaction array
    id: ID!
    market: Market!
    priceIndex: BigInt!
    price: BigInt!
    isBid: Boolean!
    rawAmount: BigInt!
    baseAmount: BigInt!
    latestTakenOrderIndex: BigInt!
}

type Token @entity {
    id: ID!
    # token symbol
    symbol: String!
    # token name
    name: String!
    # token decimals
    decimals: BigInt!
}

type OpenOrder @entity {
    # market address + "-" + nftId
    id: ID!
    nftId: BigInt!
    market: Market!
    priceIndex: BigInt!
    price: BigInt!
    isBid: Boolean!
    orderIndex: BigInt!
    rawAmount: BigInt!
    baseAmount: BigInt!
    rawFilledAmount: BigInt!
    baseFilledAmount: BigInt!
    rawClaimedAmount: BigInt!
    claimableAmount: BigInt!
    bountyAmount: BigInt!
    createdAt: BigInt!
    txHash: String!
    user: String!
}

type ChartLog @entity {
    # market address + "-" + intervalType + "-" + timestamp
    id: ID!
    market: Market!
    # interval type: 1m, 3m, 5m, 15m, 30m, 1h, 2h, 4h, 6h, 1d, 1w
    intervalType: String!
    # normalized candle timestamp of the block where this trade occurred (second)
    timestamp: BigInt!
    high: BigDecimal!
    low: BigDecimal!
    close: BigDecimal!
    baseVolume: BigDecimal!
}
